from __future__ import division

import unittest

import nose
import numpy as np
from numpy.testing.decorators import slow
from scipy.optimize import fminbound

from ..lininterp import LinInterp
from ..value_function import bellman, u_, get_iterates

np.random.seed(42)


class TestValueFunction(unittest.TestCase):

    def test_flexible(self):
        ss_w = 1.0041753592911187  # from ..vf_iteration.ss_wage_flexible
        h_ = lambda x: -1 * u_(x)
        xopt = fminbound(h_, .5, 3)
        self.assertAlmostEqual(xopt, ss_w, places=5)

    @slow
    def test_pre_post_min_max_maxer(self):
        # I changed the expected after updating, but I think I had a
        # bug before.  Was calling period utility function on the argmax
        # rather than the period + continuation value.
        grid = np.linspace(0.1, 4, 100)
        pre_max_after_10_runs = np.array([
            8.87208201,  8.87208201,  8.87208201,  8.87208201,  8.87208201,
            8.87208201,  8.87208201,  8.87208201,  8.87208201,  8.87208201,
            8.87208201,  8.87208201,  8.87208201,  8.87208201,  8.87208201,
            8.87208201,  8.87208201,  8.87208201,  8.87208201,  8.87208201,
            8.87208201,  8.87208201,  8.87208201,  8.87206945,  8.86692532,
            8.85500674,  8.83902674,  8.82075212,  8.80133774,  8.78153623,
            8.761834,    8.74254013,  8.72384499,  8.70585941,  8.688641,
            8.67221185,  8.6565707,   8.64170115,  8.62757733,  8.61416774,
            8.60143784,  8.58935188,  8.57787406,  8.56696931,  8.55660379,
            8.54674517,  8.53736282,  8.52842785,  8.51991313,  8.51179325,
            8.50404448,  8.49664466,  8.48957311,  8.48281002,  8.47633861,
            8.47014156,  8.46420331,  8.45850934,  8.45304611,  8.447801,
            8.44276222,  8.43791877,  8.43326037,  8.4287774,   8.42446085,
            8.4203023,   8.41629384,  8.41242807,  8.40869804,  8.40509721,
            8.40161946,  8.39825872,  8.39500718,  8.39186213,  8.38881902,
            8.38466046,  8.38049414,  8.37641687,  8.37082373,  8.36517898,
            8.35961238,  8.35316084,  8.34670069,  8.34031,     8.33344312,
            8.32659468,  8.31980728,  8.31280916,  8.30584443,  8.29893454,
            8.29198536,  8.2850789,   8.27822085,  8.27143234,  8.26469138,
            8.25799325,  8.2514341,   8.2449229,   8.23845103,  8.23215856])

        w0 = LinInterp(grid, 1 / grid)
        gen_maxes = get_iterates(w0, shock=1)
        maxer = [next(gen_maxes) for n in range(10)][-1].Y

        np.testing.assert_almost_equal(maxer, pre_max_after_10_runs)

    @slow
    def test_pre_post_min_max_argmaxer(self):
        grid = np.linspace(0.1, 4, 100)
        w0 = LinInterp(grid, 1 / grid)
        gen_argmaxes = get_iterates(w0, argmax=True, shock=1)
        argmaxer = [next(gen_argmaxes) for n in range(10)][-1].Y

        pre_argmax_after_10_runs = np.array([
            1.00417548,  1.00417694,  1.00417618,  1.0041765,   1.00417468,
            1.00417589,  1.00417657,  1.0041757,   1.00417576,  1.00417671,
            1.00417613,  1.00417592,  1.00417657,  1.0041747,   1.0041753,
            1.00417633,  1.00417702,  1.00417582,  1.00417592,  1.00417565,
            1.00417653,  1.00417598,  1.00417528,  1.00568641,  1.03720149,
            1.06871925,  1.10023433,  1.13174941,  1.16326449,  1.19477957,
            1.22629465,  1.25780973,  1.28932481,  1.32083989,  1.35235496,
            1.38387004,  1.41538512,  1.4469002,   1.47841528,  1.50993034,
            1.54144537,  1.57296041,  1.60447544,  1.63599048,  1.66750551,
            1.69902055,  1.73053558,  3.40083183,  3.40083194,  3.40083206,
            3.40083217,  3.40083229,  3.40083241,  3.40082981,  3.40082992,
            3.40083004,  3.40083016,  3.40083027,  3.40083039,  3.40083051,
            3.40083062,  3.40083074,  3.40083091,  3.4008311,   3.40083129,
            3.40083148,  3.40083166,  3.40083185,  3.40083204,  3.40083223,
            3.40083242,  3.40082989,  3.40083008,  3.40083026,  3.40083045,
            3.40083064,  3.40083087,  3.40083118,  3.40083148,  3.40083178,
            3.40083209,  3.40083239,  3.40082998,  3.40083029,  3.40083059,
            3.40083098,  3.40083147,  3.40083196,  3.40082974,  3.40083023,
            3.40083072,  3.4008315,   3.40083229,  3.40083037,  3.40083143,
            3.40083,     3.40083161,  3.40083112,  3.40083241,  3.40083515])

        np.testing.assert_almost_equal(argmaxer, pre_argmax_after_10_runs)

if __name__ == '__main__':
    nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                   exit=False)
